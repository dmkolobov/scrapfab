{:use-macros nil, :excludes #{}, :name web.galleries, :imports nil, :requires nil, :uses nil, :defs {ideal-row-count {:protocol-inline nil, :meta {:file "/Users/dmitry/scrapfab/web/src-cljs/web/galleries.cljs", :line 3, :column 7, :end-line 3, :end-column 22, :arglists (quote ([[width height :as container] aspects rows-per-screen])), :doc "Return the ideal number of rows to fill the container with items."}, :name web.galleries/ideal-row-count, :variadic false, :file "src-cljs/web/galleries.cljs", :end-column 22, :method-params ([p__7378 aspects rows-per-screen]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3, :end-line 3, :max-fixed-arity 3, :fn-var true, :arglists (quote ([[width height :as container] aspects rows-per-screen])), :doc "Return the ideal number of rows to fill the container with items."}, selector {:protocol-inline nil, :meta {:file "/Users/dmitry/scrapfab/web/src-cljs/web/galleries.cljs", :line 11, :column 7, :end-line 11, :end-column 15, :arglists (quote ([key-fn coll]))}, :name web.galleries/selector, :variadic false, :file "src-cljs/web/galleries.cljs", :end-column 15, :method-params ([key-fn coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 2, :fn-var true, :arglists (quote ([key-fn coll]))}, perfect-layout {:protocol-inline nil, :meta {:file "/Users/dmitry/scrapfab/web/src-cljs/web/galleries.cljs", :line 19, :column 7, :end-line 19, :end-column 21, :arglists (quote ([container items rows-per-screen])), :doc "Items are partitioned into sequences so that the sum of the aspect ratios\n  in each sequence is roughly equal. Returns a sequence of sequences containing\n  [id aspect-ratio] tuples.\n\n  Arguments:\n\n  - container       : a [width height] tuple representing the dimensions of the layout container.\n  - items           : a sequence of [id aspect-ratio] tuples.\n  - rows-per-screen : the ideal number of rows per screen"}, :name web.galleries/perfect-layout, :variadic false, :file "src-cljs/web/galleries.cljs", :end-column 21, :method-params ([container items rows-per-screen]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 3, :fn-var true, :arglists (quote ([container items rows-per-screen])), :doc "Items are partitioned into sequences so that the sum of the aspect ratios\n  in each sequence is roughly equal. Returns a sequence of sequences containing\n  [id aspect-ratio] tuples.\n\n  Arguments:\n\n  - container       : a [width height] tuple representing the dimensions of the layout container.\n  - items           : a sequence of [id aspect-ratio] tuples.\n  - rows-per-screen : the ideal number of rows per screen"}, sum-row-aspects {:name web.galleries/sum-row-aspects, :file "src-cljs/web/galleries.cljs", :line 36, :column 1, :end-line 36, :end-column 21, :meta {:file "/Users/dmitry/scrapfab/web/src-cljs/web/galleries.cljs", :line 36, :column 6, :end-line 36, :end-column 21}}, row-height {:protocol-inline nil, :meta {:file "/Users/dmitry/scrapfab/web/src-cljs/web/galleries.cljs", :line 38, :column 7, :end-line 38, :end-column 17, :arglists (quote ([row-width items]))}, :name web.galleries/row-height, :variadic false, :file "src-cljs/web/galleries.cljs", :end-column 17, :method-params ([row-width items]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 2, :fn-var true, :arglists (quote ([row-width items]))}, do-scale-layout {:protocol-inline nil, :meta {:file "/Users/dmitry/scrapfab/web/src-cljs/web/galleries.cljs", :line 42, :column 7, :end-line 42, :end-column 22, :arglists (quote ([width layout gap]))}, :name web.galleries/do-scale-layout, :variadic false, :file "src-cljs/web/galleries.cljs", :end-column 22, :method-params ([width layout gap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 3, :fn-var true, :arglists (quote ([width layout gap]))}, scale-layout {:protocol-inline nil, :meta {:file "/Users/dmitry/scrapfab/web/src-cljs/web/galleries.cljs", :line 72, :column 7, :end-line 72, :end-column 19, :arglists (quote ([container layout gap])), :doc "Returns a sequence of sequences containing [id [x y] [width height]] tuples.\n\n  Arguments:\n\n  - container : a [width height] tuple representing the dimensions of the layout container.\n  - layout    : sequence of sequences containing [id aspect-ratio] tuples.\n  - gap       : a number representing the number of pixels of whitespace\n                to keep between inner layout items."}, :name web.galleries/scale-layout, :variadic false, :file "src-cljs/web/galleries.cljs", :end-column 19, :method-params ([container layout gap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 3, :fn-var true, :arglists (quote ([container layout gap])), :doc "Returns a sequence of sequences containing [id [x y] [width height]] tuples.\n\n  Arguments:\n\n  - container : a [width height] tuple representing the dimensions of the layout container.\n  - layout    : sequence of sequences containing [id aspect-ratio] tuples.\n  - gap       : a number representing the number of pixels of whitespace\n                to keep between inner layout items."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:default}, :order [:default]}, :doc nil}